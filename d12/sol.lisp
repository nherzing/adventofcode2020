(defpackage :d12
  (:use :common-lisp :common))

(defparameter *lines* (read-lines "input.txt"))

(defconstant +NORTH+ '(0 1))
(defconstant +SOUTH+ '(0 -1))
(defconstant +EAST+ '(1 0))
(defconstant +WEST+ '(-1 0))

(defconstant +LEFT+ -1)
(defconstant +RIGHT+ 1)

(defun move (dir num pos)
  (mapcar #'+ pos (mapcar #'* dir (list num num))))

(defun turn-right-90 (dir)
  (cond ((every #'= dir +NORTH+) +EAST+)
        ((every #'= dir +EAST+) +SOUTH+)
        ((every #'= dir +SOUTH+) +WEST+)
        ((every #'= dir +WEST+) +NORTH+)))

(defun turn-left-90 (dir)
  (cond ((every #'= dir +NORTH+) +WEST+)
        ((every #'= dir +EAST+) +NORTH+)
        ((every #'= dir +SOUTH+) +EAST+)
        ((every #'= dir +WEST+) +SOUTH+)))

(defun rotate (rot num dir)
  (let ((turns (mod (/ num 90) 4))
        (result dir))
    (dotimes (x turns)
      (if (= rot +LEFT+)
          (setf result (turn-left-90 result))
          (setf result (turn-right-90 result))))
    result))

(defun solve ()
  (let ((pos '(0 0))
        (dir +EAST+))
    (dolist (line *lines*)
      (format t "~a: ~a, ~a~%" line pos dir)
      (let ((cmd (char line 0))
            (num (parse-integer (subseq line 1))))
        (cond ((char= cmd #\N)
               (setf pos (move +NORTH+ num pos)))
              ((char= cmd #\S)
               (setf pos (move +SOUTH+ num pos)))
              ((char= cmd #\E)
               (setf pos (move +EAST+ num pos)))
              ((char= cmd #\W)
               (setf pos (move +WEST+ num pos)))
              ((char= cmd #\L)
               (setf dir (rotate +LEFT+ num dir)))
              ((char= cmd #\R)
               (setf dir (rotate +RIGHT+ num dir)))
              ((char= cmd #\F)
               (setf pos (move dir num pos))))))
    (format t "~a~%" pos)
    (reduce #'+ (mapcar #'abs pos))))

(defun rotate-wp-left (num wp)
  (let ((turns (mod (/ num 90) 4))
        (result wp))
    (dotimes (x turns)
      (setf result (list (- (second result)) (first result))))
    result))

(defun rotate-wp-right (num wp)
  (let ((turns (mod (/ num 90) 4))
        (result wp))
    (dotimes (x turns)
      (setf result (list (second result) (- (first result)))))
    result))

(defun move-to-wp (num wp pos)
  (mapcar #'+ pos (mapcar #'* wp (list num num))))

(defun solve2 ()
  (let ((pos '(0 0))
        (wp '(10 1)))
    (dolist (line *lines*)
      (format t "~a: ~a, ~a~%" line pos wp)
      (let ((cmd (char line 0))
            (num (parse-integer (subseq line 1))))
        (cond ((char= cmd #\N)
               (setf wp (move +NORTH+ num wp)))
              ((char= cmd #\S)
               (setf wp (move +SOUTH+ num wp)))
              ((char= cmd #\E)
               (setf wp (move +EAST+ num wp)))
              ((char= cmd #\W)
               (setf wp (move +WEST+ num wp)))
              ((char= cmd #\L)
               (setf wp (rotate-wp-left num wp)))
              ((char= cmd #\R)
               (setf wp (rotate-wp-right num wp)))
              ((char= cmd #\F)
               (setf pos (move-to-wp num wp pos))))))
    (format t "~a~%" pos)
    (reduce #'+ (mapcar #'abs pos))))
